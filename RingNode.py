import socket
import threading
import time
import select
import sys
import random
import logging
from MessageQueue import MessageQueue
from Packet import Packet
from CRC32 import CRC32
from ErrorInserter import ErrorInserter

class RingNode:
    def __init__(self, config_file):
        # Carrega configura√ß√µes do n√≥ a partir de um arquivo externo
        self.load_config(config_file)

        # Inicializa a fila de mensagens pendentes (limite m√°ximo de 10)
        self.message_queue = MessageQueue(max_size=10)

        # Indica se o n√≥ possui o token inicialmente (come√ßa sem token)
        self.token_holder = False

        # Registra o √∫ltimo momento que viu ou enviou o token
        self.last_token_time = None
        self.time_i_last_sent_token = None

        # Define o tempo limite para detectar perda do token (timeout)
        self.token_timeout = self.token_hold_time * 5

        # Tempo m√≠nimo esperado para o retorno do token ap√≥s ser enviado
        self.min_token_time = self.token_hold_time * 2 + 0.5

        # Flag que indica se o n√≥ est√° rodando (para controle das threads)
        self.running = True

        # Indica se o n√≥ est√° aguardando resposta (ACK ou NAK) de mensagem enviada
        self.waiting_for_answer = False

        # Configura√ß√£o do sistema de logs (salvos em arquivo espec√≠fico do n√≥)
        logging.basicConfig(
            filename=f"{self.nickname}.log",
            level=logging.INFO,
            format='[%(asctime)s] %(message)s',
            datefmt='%H:%M:%S'
        )

        # Cria o socket UDP para comunica√ß√£o na rede em anel
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

        # Vincula (bind) o socket √† porta especificada (tenta ouvir na porta configurada)
        try:
            self.socket.bind(('0.0.0.0', self.port))
            self.socket.settimeout(1.0)  # Define um timeout curto para n√£o bloquear infinitamente
        except Exception as e:
            print(f"[{self.nickname}] Erro ao bindar na porta {self.port}: {e}")
            sys.exit(1)  # Sai caso n√£o consiga vincular o socket √† porta

        # Inicializa as threads para diferentes fun√ß√µes essenciais do n√≥
        threading.Thread(target=self.generate_initial_token, daemon=True).start()  # Thread que gera token inicial se configurado
        threading.Thread(target=self.receive_packets, daemon=True).start()        # Thread que recebe e processa pacotes continuamente
        threading.Thread(target=self.token_monitor, daemon=True).start()          # Thread que monitora se o token foi perdido
        threading.Thread(target=self.user_input_handler, daemon=True).start()     # Thread que escuta comandos do usu√°rio para envio de mensagens

    def load_config(self, config_file):
        try:
            # Abre o arquivo de configura√ß√£o para leitura
            with open(config_file, 'r') as f:
                # L√™ todas as linhas n√£o vazias e remove espa√ßos em branco das extremidades
                lines = [line.strip() for line in f.readlines() if line.strip()]

                # Verifica se o arquivo cont√©m exatamente 4 linhas obrigat√≥rias
                if len(lines) < 4:
                    raise ValueError("Arquivo de configura√ß√£o deve ter 4 linhas n√£o vazias.")

                # Extrai endere√ßo IP e porta do vizinho direito (formato IP:Porta)
                dest_ip, dest_port = lines[0].split(':')
                self.right_neighbor = (dest_ip, int(dest_port))

                # Obt√©m o nickname (identificador) do n√≥ atual
                self.nickname = lines[1]

                # Configura o tempo que o n√≥ segurar√° o token antes de passar adiante
                self.token_hold_time = int(lines[2])

                # Determina se este n√≥ ser√° respons√°vel por gerar o token inicial
                self.generate_token = lines[3].lower() == 'true'

                # Verifica se o usu√°rio forneceu a porta local como argumento via linha de comando
                if len(sys.argv) < 3:
                    print("Uso: python3 ring_network.py <arquivo_config> <minha_porta>")
                    sys.exit(1)

                # Atribui a porta local fornecida como argumento do sistema
                self.port = int(sys.argv[2])

                # Exibe as configura√ß√µes carregadas no console para valida√ß√£o
                print(f"[{self.nickname}] Configura√ß√£o carregada:")
                print(f"  - Porta local (bind): 0.0.0.0:{self.port}")
                print(f"  - Vizinho direito: {self.right_neighbor}")
                print(f"  - Tempo para segurar token: {self.token_hold_time}s")
                print(f"  - Gera token inicial? {'Sim' if self.generate_token else 'N√£o'}")

        except Exception as e:
            # Trata exce√ß√µes e exibe erro com detalhe apropriado
            print(f"[{self.nickname if hasattr(self, 'nickname') else '??'}] Erro ao ler arquivo de configura√ß√£o: {e}")
            sys.exit(1)  # Encerra o programa devido a erro cr√≠tico

    def generate_initial_token(self):
        # Verifica se este n√≥ √© respons√°vel por gerar o token inicial (conforme arquivo de configura√ß√£o)
        if self.generate_token:
            # Espera 1 segundo para garantir que todos os n√≥s estejam prontos na rede antes de gerar o token
            time.sleep(1.0)

            # Marca o n√≥ como possuidor atual do token
            self.token_holder = True

            # Registra no log que o token inicial est√° sendo gerado
            logging.info(f"üõ†Ô∏è [{self.nickname}] Gerando token inicial...")

            # Chama a fun√ß√£o que envia o token ao pr√≥ximo n√≥
            self.send_token()

    def send_token(self):
        try:
            # Cria o pacote de token para ser transmitido
            token_payload = Packet.create_token()

            # Codifica o pacote em formato string e depois em bytes UTF-8 para envio via UDP
            encoded_token_payload = Packet.encode(token_payload).encode('utf-8')

            # Envia o token para o pr√≥ximo n√≥ na rede (vizinho direito)
            self.socket.sendto(encoded_token_payload, self.right_neighbor)

            # Atualiza o registro do tempo atual como o momento em que o token foi enviado
            current_time = time.time()
            self.last_token_time = current_time
            self.time_i_last_sent_token = current_time

            # Registra no log a a√ß√£o de envio do token
            logging.info(f"üîÑ [{self.nickname}] Enviou TOKEN para {self.right_neighbor}")
            logging.info(f"üöö Token agora em tr√¢nsito para {self.right_neighbor}")

            # Marca que o n√≥ n√£o possui mais o token ap√≥s envi√°-lo
            self.token_holder = False

        except Exception as e:
            # Registra qualquer exce√ß√£o ocorrida durante o envio do token no log
            logging.info(f"‚ùå [{self.nickname}] Erro ao enviar token: {e}")

    def receive_packets(self):
        # Loop infinito para receber pacotes continuamente enquanto o n√≥ est√° ativo
        while self.running:
            try:
                # Recebe um pacote UDP (at√© 4096 bytes)
                data, addr = self.socket.recvfrom(4096)

                # Decodifica os dados recebidos para string UTF-8
                payload_str = data.decode('utf-8')

                # Verifica se o pacote recebido √© o token (compara√ß√£o direta)
                if payload_str == Packet.encode(Packet.create_token()):
                    self.handle_token_received(addr)

                # Verifica se o pacote recebido √© um pacote de dados (verifica prefixo identificador)
                elif payload_str.startswith(Packet.encode(Packet.create_data("", "", "", ""))[0:4]):
                    self.process_data_packet(payload_str, addr)

            except socket.timeout:
                # Ignora a exce√ß√£o de timeout e continua o loop (para manter o programa ativo)
                continue

            except Exception as e:
                # Registra outros erros inesperados durante a recep√ß√£o no log
                if self.running:
                    logging.info(f"‚ö†Ô∏è [{self.nickname}] Erro ao receber pacote: {e}")

    def handle_token_received(self, addr_from):
        # Armazena o momento atual do recebimento do token
        current_time = time.time()

        # Verifica se este n√≥ j√° possui o token (evitando duplicidade)
        if self.token_holder:
            logging.info(f"‚ö†Ô∏è [{self.nickname}] TOKEN duplicado recebido de {addr_from} ‚Äî Ignorando")
            return  # Sai do m√©todo sem realizar mais a√ß√µes

        # Marca o n√≥ como possuidor atual do token
        self.token_holder = True
        logging.info(f"üü¢ [{self.nickname}] TOKEN chegou de {addr_from} ‚Äî Agora em {self.nickname}")

        # Verifica o tempo transcorrido desde o envio anterior do token, caso j√° tenha sido enviado antes
        if self.time_i_last_sent_token is not None:
            elapsed = current_time - self.time_i_last_sent_token
            if elapsed < self.min_token_time:
                logging.info(f"‚è±Ô∏è [{self.nickname}] Token retornou em {elapsed:.2f}s (esperado m√≠nimo: {self.min_token_time}s)")

        # Atualiza o √∫ltimo tempo registrado em que o token foi visto
        self.last_token_time = current_time

        # Verifica se h√° mensagens pendentes na fila e se n√£o est√° aguardando resposta
        if not self.message_queue.is_empty() and not self.waiting_for_answer:
            # Se houver mensagem, tenta envi√°-la imediatamente
            self.send_data()
            self.waiting_for_answer = True
        elif self.message_queue.is_empty():
            # Se n√£o houver mensagem, aguarda um tempo definido e ent√£o envia o token adiante
            time.sleep(self.token_hold_time)
            self.send_token()

    def send_data(self):
        try:
            # Verifica a pr√≥xima mensagem na fila sem remov√™-la
            msg = self.message_queue.peek()

            # Se n√£o houver mensagens para enviar, verifica se possui token para pass√°-lo adiante
            if not msg:
                if self.token_holder:
                    time.sleep(self.token_hold_time)  # Aguarda o tempo definido antes de passar o token
                    self.send_token()  # Envia o token ao pr√≥ximo n√≥
                return  # Encerra o m√©todo caso n√£o haja mensagem a ser enviada

            # Extrai informa√ß√µes da mensagem pendente (destinat√°rio, conte√∫do e n√∫mero de tentativas)
            dest, content, attempts = msg['dest'], msg['content'], msg['attempts']

            # Define um status inicial padr√£o caso o destinat√°rio n√£o exista (ser√° ajustado posteriormente)
            status = "maquinanaoexiste"

            # Cria o pacote de dados utilizando informa√ß√µes do remetente, destinat√°rio e conte√∫do
            data_packet = Packet.create_data(self.nickname, dest, content, status)

            # Calcula o valor de checksum CRC32 para garantir integridade dos dados
            crc = CRC32.calculate(data_packet)

            # Insere o CRC no pacote criado
            data_packet = Packet.set_crc(data_packet, crc)

            # Simula ocorr√™ncia de erro com 30% de chance (para testar robustez do sistema)
            if random.random() < 0.3:
                data_packet = ErrorInserter.insert_error(data_packet)

            # Codifica o pacote completo para string e depois bytes UTF-8
            encoded = Packet.encode(data_packet).encode('utf-8')

            # Envia o pacote para o pr√≥ximo n√≥ na rede
            self.socket.sendto(encoded, self.right_neighbor)

            # Registra a tentativa de envio no log com detalhes
            logging.info(f"‚úâÔ∏è [{self.nickname}] Enviando para {dest} (tentativa {attempts+1}) via {self.right_neighbor}")
            logging.info(f"üì¶ Pacote agora em tr√¢nsito para {self.right_neighbor}")

        except Exception as e:
            # Trata erros durante o envio, registrando-os no log
            logging.info(f"‚ùå [{self.nickname}] Erro ao enviar dados: {e}")

            # Caso esteja aguardando uma resposta e possua o token, passa-o adiante ap√≥s timeout
            if self.token_holder and self.waiting_for_answer:
                self.waiting_for_answer = False
                time.sleep(self.token_hold_time)
                self.send_token()

    def process_data_packet(self, payload_str, addr_from):
        try:
            # Decodifica o pacote de dados recebido
            data_packet = Packet.decode(payload_str)
            
            # Extrai informa√ß√µes principais do pacote
            origem = data_packet['src_nick']
            destino = data_packet['dest_nick']
            status_atual = data_packet['error_status']
            mensagem = data_packet['message']

            logging.info(f"[{self.nickname}] Pacote recebido de {addr_from} (origem: {origem}, destino: {destino}, status: {status_atual})")

            # Verifica se o pacote retornou ao remetente original (este n√≥)
            if origem == self.nickname:
                self.waiting_for_answer = False
                
                # Se o pacote foi um broadcast, remove imediatamente da fila ao retornar
                if destino == "TODOS":
                    dequeued_msg = self.message_queue.dequeue()
                    logging.info(f"[{self.nickname}] Broadcast para TODOS completou a volta e foi removido da fila.")
                else:
                    # Se a mensagem retornada foi confirmada com sucesso (ACK)
                    if status_atual == "ACK":
                        dequeued_msg = self.message_queue.dequeue()
                        logging.info(f"[{self.nickname}] Mensagem para {destino} entregue com sucesso (ACK). Removendo da fila.")
                    
                    # Se houve falha na entrega (NAK)
                    elif status_atual == "NAK":
                        msg_in_queue = self.message_queue.peek()
                        if msg_in_queue and msg_in_queue['dest'] == destino:
                            msg_in_queue['attempts'] += 1
                            
                            # Limita a apenas uma retransmiss√£o
                            if msg_in_queue['attempts'] >= 2:
                                self.message_queue.dequeue()
                                logging.info(f"[{self.nickname}] Mensagem para {destino} falhou ap√≥s 1 retransmiss√£o. Removendo.")
                            else:
                                logging.info(f"[{self.nickname}] Falha (NAK) para {destino}. Retransmitindo (tentativa {msg_in_queue['attempts']}).")
                        else:
                            logging.info(f"[{self.nickname}] Recebido NAK para {destino}, mas n√£o corresponde ao topo da fila.")

                    # Se o destino n√£o existe
                    elif status_atual == "maquinanaoexiste":
                        self.message_queue.dequeue()
                        logging.info(f"[{self.nickname}] Destino {destino} inexistente. Mensagem descartada.")
                    else:
                        logging.info(f"[{self.nickname}] Status desconhecido '{status_atual}' recebido.")

                # Decide se h√° outra mensagem para enviar ou se deve passar o token
                if self.token_holder:
                    if not self.message_queue.is_empty():
                        self.send_data()
                        self.waiting_for_answer = True
                    else:
                        time.sleep(self.token_hold_time)
                        self.send_token()
                return

            # Se o pacote √© destinado diretamente a este n√≥ (unicast)
            if destino == self.nickname:
                # Cria um pacote tempor√°rio para calcular CRC
                temp_packet_for_crc = {
                    'type': 'data',
                    'value': data_packet['value'],
                    'src_nick': origem,
                    'dest_nick': destino,
                    'error_status': status_atual,
                    'message': mensagem
                }
                crc_calculado = CRC32.calculate(temp_packet_for_crc)
                
                # Valida√ß√£o do CRC recebido
                try:
                    crc_recebido = int(data_packet['crc'])
                except ValueError:
                    logging.info(f"[{self.nickname}] CRC inv√°lido '{data_packet['crc']}'. Enviando NAK.")
                    data_packet['error_status'] = "NAK"
                    data_packet['crc'] = '0'
                    new_crc = CRC32.calculate(data_packet)
                    Packet.set_crc(data_packet, new_crc)
                    self.socket.sendto(Packet.encode(data_packet).encode('utf-8'), self.right_neighbor)
                    return

                # Verifica CRC para confirmar integridade
                if crc_calculado != crc_recebido:
                    data_packet['error_status'] = "NAK"
                    logging.info(f"[{self.nickname}] Falha no CRC (origem={origem}). Enviando NAK.")
                else:
                    data_packet['error_status'] = "ACK"
                    logging.info(f"[{self.nickname}] CRC v√°lido. Mensagem de {origem}: \"{mensagem}\". Enviando ACK.")

                # Recalcula CRC e encaminha o pacote ACK ou NAK
                data_packet['crc'] = '0'
                new_crc_for_ack = CRC32.calculate(data_packet)
                Packet.set_crc(data_packet, new_crc_for_ack)
                self.socket.sendto(Packet.encode(data_packet).encode('utf-8'), self.right_neighbor)
                return

            # Se o pacote √© um broadcast (destino "TODOS")
            if destino == "TODOS":
                temp_packet_bcast = {
                    'type': 'data',
                    'value': data_packet['value'],
                    'src_nick': origem,
                    'dest_nick': destino,
                    'error_status': status_atual,
                    'message': mensagem
                }
                crc_calculado_bcast = CRC32.calculate(temp_packet_bcast)

                # Valida√ß√£o do CRC do pacote broadcast recebido
                try:
                    crc_recebido_bcast = int(data_packet['crc'])
                    if crc_calculado_bcast == crc_recebido_bcast:
                        logging.info(f"[{self.nickname}] Broadcast v√°lido de {origem}: \"{mensagem}\" (CRC OK)")
                    else:
                        logging.info(f"[{self.nickname}] Broadcast inv√°lido de {origem}: \"{mensagem}\" (CRC falhou)")
                except ValueError:
                    logging.info(f"[{self.nickname}] Broadcast de {origem} com CRC inv√°lido: \"{mensagem}\"")

                # Encaminha o broadcast para o pr√≥ximo n√≥
                self.socket.sendto(payload_str.encode('utf-8'), self.right_neighbor)
                return

            # Se o pacote n√£o √© destinado a este n√≥ nem √© broadcast, simplesmente encaminha ao pr√≥ximo n√≥
            self.socket.sendto(payload_str.encode('utf-8'), self.right_neighbor)

        except Exception as e:
            logging.info(f"[{self.nickname}] Erro ao processar pacote: {e}. Payload: '{payload_str}'")

    def token_monitor(self):
        # Monitora continuamente a presen√ßa do token na rede
        while self.running:
            # Aguarda 1 segundo antes de cada verifica√ß√£o
            time.sleep(1)

            # Verifica se o token j√° foi visto antes
            if self.last_token_time is not None:
                # Calcula quanto tempo se passou desde a √∫ltima vez que viu o token
                elapsed = time.time() - self.last_token_time

                # Se o tempo ultrapassou o limite (token_timeout) e o n√≥ n√£o possui o token atualmente
                if elapsed > self.token_timeout and not self.token_holder:
                    # Registra no log que o token foi considerado perdido
                    logging.info(f"üï≥Ô∏è [{self.nickname}] TOKEN perdido ap√≥s {elapsed:.2f}s ‚Äî Gerando novo...")

                    # Marca o n√≥ como possuidor atual do token
                    self.token_holder = True

                    # Ajusta flag para indicar que ir√° gerar um novo token
                    self.generate_token = True

                    # Envia o novo token gerado ao pr√≥ximo n√≥
                    self.send_token()

    def user_input_handler(self):
        # Exibe mensagem inicial para indicar que o n√≥ est√° pronto para receber comandos
        print(f"\n[{self.nickname}] Pronto para comandos (<destino> <mensagem>):")
        
        # Loop para escutar continuamente os comandos do usu√°rio enquanto o n√≥ estiver ativo
        while self.running:
            try:
                # Aguarda at√© 1 segundo por entrada do usu√°rio sem bloquear o restante do programa
                ready, _, _ = select.select([sys.stdin], [], [], 1.0)
                
                # Se houver entrada dispon√≠vel do usu√°rio
                if ready:
                    # L√™ a linha digitada pelo usu√°rio e remove espa√ßos em branco adicionais
                    line = sys.stdin.readline().strip()
                    # Comando: /forcartoken
                    if line == "/forcartoken":
                        if not self.token_holder:
                            self.token_holder = True
                            logging.info(f"[{self.nickname}] Comando manual: for√ßando token.")
                            self.send_token()
                        continue

                    # Comando: /removertoken
                    if line == "/removertoken":
                        self.token_holder = False
                        logging.info(f"[{self.nickname}] Comando manual: removendo token (n√£o ser√° passado).")
                        continue

                    # Comando: /limparfila
                    if line == "/limparfila":
                        while not self.message_queue.is_empty():
                            self.message_queue.dequeue()
                        print(f"[{self.nickname}] Fila de mensagens limpa.")
                        logging.info(f"[{self.nickname}] Comando manual: limpando fila de mensagens.")
                        continue

                    if line == "/debug":
                        tempo_desde_token = time.time() - self.last_token_time if self.last_token_time else "nunca"
                        print(f"[{self.nickname}] STATUS DEBUG")
                        print(f"  Possui token? {'Sim' if self.token_holder else 'N√£o'}")
                        print(f"  Aguardando ACK/NAK? {'Sim' if self.waiting_for_answer else 'N√£o'}")
                        print(f"  √öltimo token visto h√°: {tempo_desde_token} segundos")
                        continue

                    if line == "/duplicartoken":
                        token = Packet.create_token()
                        self.socket.sendto(Packet.encode(token).encode('utf-8'), self.right_neighbor)
                        self.socket.sendto(Packet.encode(token).encode('utf-8'), self.right_neighbor)
                        logging.info(f"[{self.nickname}] Comando: token duplicado enviado.")
                        continue

                    if line == "/statusanel":
                        print(f"[{self.nickname}] Status do anel:")
                        print(f"  Token: {'Sim' if self.token_holder else 'N√£o'}")
                        print(f"  Fila vazia: {'Sim' if self.message_queue.is_empty() else 'N√£o'}")
                        print(f"  Esperando resposta? {'Sim' if self.waiting_for_answer else 'N√£o'}")
                        continue


                    if line == "/mostrafila":
                        with self.message_queue.queue.mutex:
                            fila = list(self.message_queue.queue.queue)
                            print(f"[{self.nickname}] Fila atual:")
                            for i, msg in enumerate(fila):
                                print(f"  {i+1}. Para {msg['dest']} ‚Äì \"{msg['content']}\" (tentativas: {msg['attempts']})")
                        continue

                    if line.startswith("/tempo "):
                        try:
                            novo_tempo = float(line.split()[1])
                            self.token_hold_time = novo_tempo
                            self.token_timeout = self.token_hold_time * 5
                            self.min_token_time = self.token_hold_time * 2 + 0.5
                            print(f"[{self.nickname}] Tempo do token ajustado para {novo_tempo} segundos.")
                        except ValueError:
                            print(f"[{self.nickname}] Valor inv√°lido para tempo.")
                        continue


                    # Ignora linhas vazias
                    if not line:
                        continue
                    
                    # Divide a linha em duas partes: destino e mensagem
                    parts = line.split(' ', 1)
                    
                    # Valida se a entrada cont√©m ao menos duas partes (destinat√°rio e mensagem)
                    if len(parts) < 2:
                        print(f"[{self.nickname}] Comando inv√°lido. Use: <destino> <mensagem>")
                        continue
                    
                    # Extrai destinat√°rio e mensagem digitados pelo usu√°rio
                    dest, msg = parts[0], parts[1]
                    
                    # Tenta enfileirar a mensagem na fila de mensagens pendentes
                    ok = self.message_queue.enqueue({'dest': dest, 'content': msg, 'attempts': 0})
                    
                    # Se a fila estiver cheia, informa o usu√°rio
                    if not ok:
                        print(f"[{self.nickname}] Fila cheia. N√£o foi poss√≠vel enfileirar.")
                    # Se possuir o token e n√£o estiver aguardando resposta, inicia envio imediatamente
                    elif self.token_holder and not self.waiting_for_answer:
                        print(f"[{self.nickname}] Possui token, enviando...")
                        self.send_data()
                        self.waiting_for_answer = True
                        
            except Exception as e:
                # Trata e exibe erros inesperados durante a leitura de entrada do usu√°rio
                if self.running:
                    print(f"[{self.nickname}] Erro no input do usu√°rio: {e}")

    def shutdown(self):
        # Exibe mensagem indicando que o n√≥ est√° sendo encerrado
        print(f"[{self.nickname}] Encerrando n√≥...")

        # Altera a flag para encerrar os loops das threads que dependem de 'self.running'
        self.running = False

        try:
            # Tenta fechar o socket UDP utilizado pela aplica√ß√£o
            self.socket.close()
        except Exception as e:
            # Caso ocorra algum erro ao fechar o socket, exibe uma mensagem de erro
            print(f"[{self.nickname}] Erro ao fechar socket: {e}")
